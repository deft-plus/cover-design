@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'theming/object-keys';
// @use 'theming/default-theme';

/// Function calculates if text needs to be light or dark depending on the background color passed.
/// From this W3C document: http://www.webmasterworld.com/r.cgi?f=88&d=9769&url=http://www.w3.org/TR/AERT#color-contrast
/// Color brightness is determined by the following formula:
/// ((Red value X 299) + (Green value X 587) + (Blue value X 114)) / 1000
@function contrast-color($theme, $mode, $color-name, $light, $dark) {
  $palette: map.get($theme, 'palette');
  $theme: map.get($theme, 'raw-theme');
  $w: null;

  // Is a theme color.
  @if list.index(object-keys.$colors, $color-name) != null {
    $colors-with-mode: map.get($theme, $mode);
    $color-value: map.get($colors-with-mode, $color-name);
    $w: map.get($palette, $color-value);
  }
  // Is in palette.
  @else {
    $w: map.get($palette, $color-name);
  }

  $n: map.get($palette, $light);

  $r: (max(red($n), red($w))) - (min(red($n), red($w)));
  $g: (max(green($n), green($w))) - (min(green($n), green($w)));
  $b: (max(blue($n), blue($w))) - (min(blue($n), blue($w)));
  $sum-rgb: $r + $g + $b;

  @if $sum-rgb < 370 {
    @return string.unquote('var(--#{$dark}-color)');
  } @else {
    @return string.unquote('var(--#{$light}-color)');
  }
}

/// Extracts a color from a theme or throws an error if it doesn't exist in the
/// object-keys.$color-keys array.
/// @param {Map} $theme The theme from which to extract a color.
/// @param {String} $color-name The name of the variable to get (Can be from the palette or the theme).
@function get-color($theme, $color-name) {
  @if list.index(object-keys.$color-keys, $color-name) {
    @return 'var(--#{$color-name}-color)';
  }

  @error 'Color "' + $color-name + '" does not exist in theme. Available colors are: ' + object-keys.$color-keys;
}

@function destructure-color($color) {
  // @return $color;
  @return red($color), green($color), blue($color);
}

@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use 'object-keys';
@use 'default-variables';
@use 'prebuilt-themes/default-theme';

/// Creates a complete theme object with all the configuration given to use in the use-theme mixin.
/// @param {Map} $theme The theme configuration object (See 'core/theming/object-keys/$theme-keys' for the map structure).
/// @param {Map} $variables The variables configuarion object (See 'core/theming/object-keys/$variable-keys' for the map structure).
/// @return {Map} A complete Cover UI theme configuration object.
@function define-theme(
  $theme: default-theme.$default-theme,
  $variables: default-variables.$default-variables
) {
  // It will merge params with the default ones. This is done in case the params do not have all of the fields.
  $theme-with-defaults: map.deep-merge(default-theme.$default-theme, $theme);
  $variables-with-defaults: map.deep-merge(default-variables.$default-variables, $variables);

  // Merges default light theme fields with the light theme fields passed.
  $light-colors: map.deep-merge(
    map.get(default-theme.$default-theme, 'light'),
    map.get($theme-with-defaults, 'light')
  );
  // Merges default dark theme fields with the dark theme fields passed.
  $dark-colors: map.deep-merge(
    map.get(default-theme.$default-theme, 'dark'),
    map.get($theme-with-defaults, 'dark')
  );

  // Map the theme fields for the light and dark colors.
  $light: -get-theme-map($light-colors, 'light');
  $dark: -get-theme-map($dark-colors, 'dark');

  $built-theme: (
    // Merges both the light and dark theme into one map.
    theme: map.merge($light, $dark)
  );

  // Merge the variables with the theme to create a complete theme.
  $result: map.deep-merge($built-theme, $variables-with-defaults);

  @return $result;
}

/// Creates the colors for a given mode with the given colors to use in the theme. The values will
/// be returned as CSS variables.
/// @param {Map} $colors The theme map.
/// @param {String} $mode The color type to get.
/// @return {Map} A map with the colors from the palette in the theme.
@function -get-theme-map($colors, $mode) {
  $theme-map: (); // Empty map to store the theme.

  // Loop over each key to map the CSS variables into the $theme-map variable.
  @each $key in object-keys.$theme-keys {
    $theme-map: map.set($theme-map, #{$mode}-#{$key}, -get-color($colors, $key));
  }

  @return $theme-map;
}

/// Creates the CSS variable for a given color type and color name.
/// @param {Map} $colors The theme map to get the color from.
/// @param {String} $color-name The color name to get from the $colors.
/// @return {String} The CSS variable for the color.
@function -get-color($colors, $name) {
  // Get the color to set in the map.
  $color-name: map.get($colors, $name);

  // Check if the color-name is an allowed keys for the palette.
  @if not list.index(object-keys.$variables-palette-keys, $color-name) {
    @error 'The color "' + $color-name + '" can\'t be used in the theme. Available colors are: ' + object-keys.$variables-palette-keys;
  }

  // Return the color as a css variable.
  @return 'var(--#{$color-name}-color)';
}

@use 'sass:string';
@use 'functions' as f;
@use 'reset';

@mixin with-theme($theme) {
  @include reset.apply;

  // Barlow Font.
  @import url('https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
  @import url('https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css');

  :root {
    // Loop over theme to create css variables.
    @each $root-key, $root in $theme {
      @if $root-key == 'theme' {
        @each $color-key, $color in $root {
          @if string.index($color-key, 'light-') != null {
            $color-name: string.slice($color-key, string.index($color-key, '-') + 1);
            --#{$color-name}-color: #{$color};
          }
        }
      }

      @if $root-key == 'palette' {
        @each $color-key, $color in $root {
          --#{$color-key}-color: #{f.destructure-color($color)};
        }
      }

      @if $root-key == 'typography' {
        @each $key, $value in $root {
          --#{$key}: #{$value};
        }
      }
    }

    // --color: #{f.var($theme, 'theme', 'light-text')};
    // --background: #{f.var($theme, 'theme', 'light-background')};

    // Add font-family to all elements.
    font-family: var(--font-family);
  }

  html,
  body {
    color: rgb(var(--text-color));
    background-color: rgb(var(--background-color));
  }

  @media (prefers-color-scheme: dark) {
    :root {
      // --color: #{f.var($theme, 'theme', 'dark-text')};
      // --background: #{f.var($theme, 'theme', 'dark-background')};

      // Loop over theme to create css variables.
      @each $root-key, $root in $theme {
        @if $root-key == 'theme' {
          @each $color-key, $color in $root {
            @if string.index($color-key, 'dark-') != null {
              $color-name: string.slice($color-key, string.index($color-key, '-') + 1);
              --#{$color-name}-color: #{$color};
            }
          }
        }
      }
    }
  }
}

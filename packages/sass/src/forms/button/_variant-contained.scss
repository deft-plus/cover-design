@use '../../core/functions' as f;
@use '../../core/theming/object-keys';

/// Mixing adds the classes for the contained variant.
@mixin styles($theme) {
  &.is-contained {
    // Default button color without modifier.
    --element-color: var(--paper-color);

    border: 1px solid transparent;
    background-color: rgba(var(--element-color), 1);
    color: rgb(var(--text-color));

    // Overrides for the states.
    &:hover {
      background-color: rgba(var(--element-color), 0.85);
    }

    &:active {
      background-color: rgba(var(--element-color), 0.75);
      &::before {
        opacity: 1;
      }
    }
  }
}

/// Overrides for the colors modifier.
@mixin color-overrides($theme, $color) {
  &.is-contained {
    --contrast-color: #{f.contrast-color($theme, 'light', $color, 'scale-1', 'scale-7')};
    color: rgb(var(--contrast-color));

    &::before {
      --contrast-color: #{f.contrast-color($theme, 'light', $color, 'scale-1', 'scale-7')};
    }
  }
}

/// Overrides for the disabled modifier.
@mixin disabled-overrides {
  &.is-contained {
    background-color: rgb(var(--text-color), 0.3);
    color: rgba(var(--text-color), 0.6);
    &::before {
      opacity: 0;
    }
  }
}

/// Overrides for the loading modifier.
@mixin loading-overrides {
  &.is-contained {
    background-color: rgb(var(--element-color), 1);
    &::before {
      border: 2px solid rgb(var(--contrast-color, var(--text-color)));
      border-right-color: transparent;
      border-top-color: transparent;
    }
  }
}
